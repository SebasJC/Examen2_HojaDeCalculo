
static celdaRow = 0;

static celdaCol = 0;

procedure run () do

    int rows = input.nextInt();
    int cols = input.nextInt();

    String[][] datos = new String[rows][cols];
    for (int i = 0; i < rows; i++) 
      for (int k = 0; k < cols; k++) 
        datos[i][k] = input.next();
      end

    end

    for (int i = 0; i < rows; i++) 
        for (int k = 0; k < cols; k++) 
          datos[i][k] = datos[i][k].replace(" ","");
          String num = datos[i][k].split("/")[0];
          String den = datos[i][k].split("/")[1];
          Fraccion ff = new Fraccion(num, den);
          datos [i][k] = ff.toString();
        end
    end

    create String nombres;
    create String [] arregloConjuntos;

    create HashMap<String, String[]> Conjuntos = new HashMap<String, String[]>();

    while (input.hasNextLine() && input.hasNext()) do

        String comando = input.next();
        String posiciones = input.next();

        char primerLetra;

        String num1;
        String num2;
        String den1;
        String den2;

        int row1;
        int row2;
        int col1;
        int col2;

        if (comando.contains(">=CEL")) do

            primerLetra = posiciones.charAt(1);
            celdaRow = Character.getNumericValue(primerLetra);
            celdaRow = celdaRow - 1;

            primerLetra = posiciones.charAt(0);
            celdaCol = primerLetra;
            celdaCol = celdaCol - 65;
        end

        if (comando.contains(">=CONJUNTO") do

            posiciones = posiciones.replace(')',' ');
            posiciones = posiciones.replaceAll(" ", "");
            nombres = posiciones.split(",")[0];

            int temp = posiciones.split(",").length;
            arregloConjuntos = new String[temp];
            for (int index = 1; index < temp; index++) 
                arregloConjuntos[index] = posiciones.split(",")[index];
            end

            Conjuntos.put(nombres,arregloConjuntos);
        end

        if (comando.contains(">=IMPRIMIR")) do

            posiciones = posiciones.replace(')',' ');
            posiciones = posiciones.replaceAll(" ", "");

            if (Conjuntos.containsKey(posiciones)) do

                nombres = posiciones;
                arregloConjuntos = Conjuntos.get(posiciones);
                HojaDeCalculo.imprimirConjunto(nombres, arregloConjuntos, datos);
            
            end

            else do

                HojaDeCalculo.Imprimir(rows, cols,datos);

            end
        
        end

        if (comando.contains(">=SUMA")) do

            posiciones = posiciones.replace(')',' ');
            posiciones = posiciones.replaceAll(" ", "");

            if (Conjuntos.containsKey(posiciones)) do
                arregloConjuntos = Conjuntos.get(posiciones);
                ListaDeFracciones suma = new ListaDeFracciones();
                datos[celdaRow][celdaCol] = suma.sumaConjunto(arregloConjuntos, datos);
            end

            else do
                primerLetra = posiciones.charAt(1);
                row1 = Character.getNumericValue(primerLetra);
                row1 = row1 - 1;

                primerLetra = posiciones.charAt(0);
                col1 = primerLetra;
                col1 = col1 - 65;

                primerLetra = posiciones.charAt(4);
                row2 = Character.getNumericValue(primerLetra);
                row2 = row2 - 1;

                primerLetra = posiciones.charAt(3);
                col2 = primerLetra;
                col2 = col2 - 65;

                num2 = "0";
                den2 = "1";

                Fraccion f2 = new Fraccion(num2,den2);

                for (int i = row1; i <= row2; i++)
                    for (int k = col1; k <= col2; k++)
                      num1 = datos[i][k].split("/")[0];
                      den1 = datos[i][k].split("/")[1];
                      Fraccion f1 = new Fraccion(num1, den1);

                      if (i == row1 && k == col1)
                        f2 = f1;
                      
                      else
                        f2 = f1.sumar(f2);
                      
                    end
                end

                datos[celdaRow][celdaCol] = f2.toString();
            
            end
        end

        if (comando.contains(">=PROMEDIO")) do
            
            primerLetra = posiciones.charAt(1);

            row1 = Character.getNumericValue(primerLetra);
            row1 = row1 - 1;
        
            primerLetra = posiciones.charAt(0);

            col1 = primerLetra;

            col1 = col1 - 65;

            primerLetra = posiciones.charAt(4);

            row2 = Character.getNumericValue(primerLetra);
            row2 = row2 - 1;

            primerLetra = posiciones.charAt(3);

            col2 = primerLetra;

            col2 = col2 - 65;

            num2 = "0";
            den2 = "1";

            Fraccion f2 = new Fraccion(num2,den2);

            int contador = 0;

            for (int i = row1; i <= row2; i++)
                for (int k = col1; k <= col2; k++)
                    num1 = datos[i][k].split("/")[0];
                    den1 = datos[i][k].split("/")[1];
                    Fraccion f1 = new Fraccion(num1, den1);
                    if (i == row1 && k == col1)
                        f2 = f1;
            
                    else

                        f2 = f1.sumar(f2);
            
                    contador++;
                end
            end
            
            String num3 = "1";

            String den3 = Integer.toString(contador);

            Fraccion f3 = new Fraccion(num3, den3);

            f3 = f2.multiplicar(f3);

            datos[celdaRow][celdaCol] = f3.toString();

        end

        if (comando.contains(">=MULT")) do
            posiciones = posiciones.replace(')',' ');
            posiciones = posiciones.replaceAll(" ", "");

            if (Conjuntos.containsKey(posiciones))
              arregloConjuntos = Conjuntos.get(posiciones);
              ListaDeFracciones multiplicacion = new ListaDeFracciones();
              datos[celdaRow][celdaCol] = multiplicacion.multConjunto(arregloConjuntos, datos);
            end

            else do

            primerLetra = posiciones.charAt(1);
            row1 = Character.getNumericValue(primerLetra);
            row1 = row1 - 1;

            primerLetra = posiciones.charAt(0);
            col1 = primerLetra;
            col1 = col1 - 65;

            primerLetra = posiciones.charAt(4);
            row2 = Character.getNumericValue(primerLetra);
            row2 = row2 - 1;

            primerLetra = posiciones.charAt(3);
            col2 = primerLetra;
            col2 = col2 - 65;

            num2 = "1";
            den2 = "1";

            Fraccion f2 = new Fraccion(num2,den2);

            for (int i = row1; i <= row2; i++)
                for (int k = col1; k <= col2; k++)
                  num1 = datos[i][k].split("/")[0];
                  den1 = datos[i][k].split("/")[1];
                  Fraccion f1 = new Fraccion(num1, den1);

                  if (i == row1 && k == col1)
                    f2 = f1;
                  
                  else 
                    f2 = f1.multiplicar(f2);
                  
                end
            end
        
            datos[celdaRow][celdaCol] = f2.toString();

        end

        if (comando.contains(">=MEDIANA")) do
           
            primerLetra = posiciones.charAt(1);
            row1 = Character.getNumericValue(primerLetra);
            row1 = row1 - 1;

            primerLetra = posiciones.charAt(0);
            col1 = primerLetra;
            col1 = col1 - 65;
    

            primerLetra = posiciones.charAt(4);
            row2 = Character.getNumericValue(primerLetra);
    
            primerLetra = posiciones.charAt(3);
            col2 = primerLetra;
            col2 = col2 - 65;

            String frac;
            double valor;
            double numerador;
            double denominador;
            String valor2;

            int cont = 0;
            row2 = row2 - 1;

            for (int i = row1; i <= row2; i++) 
                for (int k = col1; k <= col2; k++) 
                    cont++;
                end
            end

            double [] minToMax = new double[cont];
            double [] ordenados = new double[cont];

            int contador = 0;

            HashMap<String,String> valores = new HashMap<String, String>();

            for (int i = row1; i <= row2; i++) 
                for (int k = col1; k <= col2; k++) 

                  frac = datos[i][k].split("/")[0];
                  numerador = Double.parseDouble(frac);

                  frac = datos[i][k].split("/")[1];
                  denominador = Double.parseDouble(frac);

                  valor = numerador / denominador;
                  frac = datos[i][k];

                  minToMax[contador] = valor;
                  valor2 = Double.toString(valor);
                  valores.put(valor2, frac);

                  contador++;
                end
            end

            double num;

            for (int i = 0; i < minToMax.length; i++)
                for (int k = i+1; k < minToMax.length; k++)
                  num = minToMax[i];
                  if (num > minToMax[k])
                    num = minToMax[k];
                  
                  ordenados[i] = num;
                end
            end

            double mediana;

            String median;

            int size = ordenados.length;


            if (ordenados.length % 2 == 0)
                mediana = (ordenados[(size/2)-1] + ordenados[size/2]) / 2;
                mediana to Fraccion;
                median = mediana.toString
                datos[celdaRow][celdaCol] = median;
            end

            else 
                mediana = ordenados[size/2];
                median = Double.toString(mediana);
                median = valores.get(median);
                datos[celdaRow][celdaCol] = median;
            end
        end

        if (comando.contains(">=MIN")) {
            
            primerLetra = posiciones.charAt(1);
            row1 = Character.getNumericValue(primerLetra);
            row1 = row1 - 1;
            
            primerLetra = posiciones.charAt(0);
            col1 = primerLetra;
            col1 = col1 - 65;
    
            primerLetra = posiciones.charAt(4);
            row2 = Character.getNumericValue(primerLetra);
    
            primerLetra = posiciones.charAt(3);
            col2 = primerLetra;
            col2 = col2 - 65;
    
            double numerador;
    
            double denominador;
    
            String minimo;

            double total;
    
            int contador = 0;
    
            double[] menores = new double[row2 * col2];
            String[] cords = new String[row2 * col2];

            row2 = row2 - 1;

            for (int i = row1; i <= row2; i++)
                for (int k = col1; k < col2; k++)
                  minimo = datos[i][k].split("/")[0];
                  numerador = Double.parseDouble(minimo);

                  minimo = datos[i][k].split("/")[1];
                  denominador = Double.parseDouble(minimo);

                  total = numerador / denominador;
                  menores[contador] = total;
                  cords[contador] = i +"/"+ k;

                  contador++;
                end
            end

            double min = 0;
            double num;
            int coordenada = 1;

            for (int index = 0; index < menores.length; index++) 
                num = menores[index];
                if (index == 0) 
                    min = num;
                end  
                
                if (num < min) {
                    min = num;
                    coordenada = index;
                end

            end

            coordenada = coordenada - 1;
        
            char fila = cords[coordenada].charAt(0);
            int fila2 = Character.getNumericValue(fila);

            char columna = cords[coordenada].charAt(2);
            int columna2 = Character.getNumericValue(columna);

            datos[celdaRow][celdaCol] = datos[fila2][columna2];
        
        end

        if (comando.contains(">=MAX")) {

            primerLetra = posiciones.charAt(1);
            row1 = Character.getNumericValue(primerLetra);
            row1 = row1 - 1;
            
            primerLetra = posiciones.charAt(0);
            col1 = primerLetra;
            col1 = col1 - 65;

            primerLetra = posiciones.charAt(4);
            row2 = Character.getNumericValue(primerLetra);
           
            primerLetra = posiciones.charAt(3);
            col2 = primerLetra;
            col2 = col2 - 65;
    
            double numerador;
    
            double denominador;
    
            String maximo;

            double total;
            int contador = 0;
            double[] mayores = new double[row2 * col2];
            String[] cords = new String[row2 * col2];
    
            row2 = row2 - 1;
            
            for (int i = row1; i <= row2; i++)
                for (int k = col1; k < col2; k++)
                  maximo = datos[i][k].split("/")[0];
                  numerador = Double.parseDouble(maximo);

                  maximo = datos[i][k].split("/")[1];
                  denominador = Double.parseDouble(maximo);

                  total = numerador / denominador;
                  mayores[contador] = total;
                  cords[contador] = i +"/"+ k;

                  contador++;
                end
            end
      
            double max = 0;
        
            double num;
      
            int coordenada = 0;
      
            for (int index = 0; index < mayores.length; index++) 
                num = mayores[index];
      
                if (num > max) 
                  max = num;
                  coordenada = index;
                
            end

            char fila = cords[coordenada].charAt(0);
            int fila2 = Character.getNumericValue(fila);

            char columna = cords[coordenada].charAt(2);
            int columna2 = Character.getNumericValue(columna);

            datos[celdaRow][celdaCol] = datos[fila2][columna2];
        
        end

	if (comando.contains(">=PRODUCTOMATRICIAL")) do

            posiciones = posiciones.replace(')',' ');
            posiciones = posiciones.replaceAll(" ", "");

            if (Conjuntos.containsKey(posiciones)) do
                arregloConjuntos = Conjuntos.get(posiciones);
                ListaDeFracciones suma = new ListaDeFracciones();
                datos[celdaRow][celdaCol] = suma.sumaConjunto(arregloConjuntos, datos);
            end

            else do
                primerLetra = posiciones.charAt(1);
                row1 = Character.getNumericValue(primerLetra);
                row1 = row1 - 1;

                primerLetra = posiciones.charAt(0);
                col1 = primerLetra;
                col1 = col1 - 65;

                primerLetra = posiciones.charAt(4);
                row2 = Character.getNumericValue(primerLetra);
                row2 = row2 - 1;

                primerLetra = posiciones.charAt(3);
                col2 = primerLetra;
                col2 = col2 - 65;
		
		primerLetra = posiciones.charAt(7);
                row3 = Character.getNumericValue(primerLetra);
                row3 = row3 - 1;

                primerLetra = posiciones.charAt(6);
                col3 = primerLetra;
                col3 = col3 - 65;

                primerLetra = posiciones.charAt(10);
                row4 = Character.getNumericValue(primerLetra);
                row4 = row4 - 1;

                primerLetra = posiciones.charAt(9);
                col4 = primerLetra;
                col4 = col4 - 65;

		if ((col2 - col1 + 1) != (row4 - row3 + 1))
			print "";
		end
		
		else
			create primeraMatriz[row2 - row1 + 1][col2 - col1 + 1]
			create primeraMatriz[row4 - row3 + 1][col4 - col3+ 1]
			create matrizFinal[row2 - row1 + 1][col4 - col3 + 1]

			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		end

    end

    input.close

end

          
        

          

        







